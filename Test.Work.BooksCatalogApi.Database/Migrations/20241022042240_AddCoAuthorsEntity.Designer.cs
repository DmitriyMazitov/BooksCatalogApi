// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Test.Work.BooksCatalogApi.Database;

#nullable disable

namespace Test.Work.BooksCatalogApi.Database.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20241022042240_AddCoAuthorsEntity")]
    partial class AddCoAuthorsEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Test.Work.BooksCatalogApi.BLL.Entities.СoAuthor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("AuthorEntityId")
                        .HasColumnType("integer")
                        .HasColumnName("author_entity_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_сo_author");

                    b.HasIndex("AuthorEntityId")
                        .HasDatabaseName("ix_сo_author_author_entity_id");

                    b.ToTable("сo_author", "public");
                });

            modelBuilder.Entity("Test.Work.BooksCatalogApi.BLL.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Идентификатор записи");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()")
                        .HasComment("Дата создания записи");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id")
                        .HasComment("ID пользователя создавшего запись");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("first_name")
                        .HasComment("Имя автора");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("last_name")
                        .HasComment("Фамилия автора");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_user_id")
                        .HasComment("ID пользователя редактировавшего запись");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Дата последнего изменения записи");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", "public");

                    b.HasComment("Автор");
                });

            modelBuilder.Entity("Test.Work.BooksCatalogApi.BLL.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Идентификатор записи");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()")
                        .HasComment("Дата создания записи");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id")
                        .HasComment("ID пользователя создавшего запись");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasComment("Описание книги");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_user_id")
                        .HasComment("ID пользователя редактировавшего запись");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title")
                        .HasComment("Название книги");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Дата последнего изменения записи");

                    b.Property<int>("СhiefAuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("сhief_author_id");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("СhiefAuthorId")
                        .HasDatabaseName("ix_books_сhief_author_id");

                    b.ToTable("books", "public");

                    b.HasComment("Книга");
                });

            modelBuilder.Entity("Test.Work.BooksCatalogApi.BLL.Entities.СoAuthor", b =>
                {
                    b.HasOne("Test.Work.BooksCatalogApi.BLL.Entities.Author", "AuthorEntity")
                        .WithMany()
                        .HasForeignKey("AuthorEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_сo_author_authors_author_entity_id");

                    b.HasOne("Test.Work.BooksCatalogApi.BLL.Entities.Book", "BookEntity")
                        .WithMany("СoAuthors")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_сo_author_books_book_entity_id");

                    b.Navigation("AuthorEntity");

                    b.Navigation("BookEntity");
                });

            modelBuilder.Entity("Test.Work.BooksCatalogApi.BLL.Entities.Book", b =>
                {
                    b.HasOne("Test.Work.BooksCatalogApi.BLL.Entities.Author", "СhiefAuthor")
                        .WithMany()
                        .HasForeignKey("СhiefAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_authors_сhief_author_id");

                    b.Navigation("СhiefAuthor");
                });

            modelBuilder.Entity("Test.Work.BooksCatalogApi.BLL.Entities.Book", b =>
                {
                    b.Navigation("СoAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
